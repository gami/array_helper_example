// Code generated by "array_helper"; DO NOT EDIT.

package chapter3

type Users []*User

// Filter はスライスの各要素を引数で与えられた関数でテストし、結果が真になるものだけを絞り込んだ新たなスライスを生成します
func (a Users) Filter(f func(o *User) bool) Users {
	res := make(Users, 0)
	for _, o := range a {
		if f(o) {
			res = append(res, o)
		}
	}

	return res
}

// ForEach はスライスの要素それぞれに対して、一度ずつ引数で与えられた関数を実行します
func (a Users) ForEach(f func(o *User) error) error {
	for _, o := range a {
		err := f(o)
		if err != nil {
			return err
		}
	}

	return nil
}

// Map は与えられた関数に対してスライスの全要素を処理し、その結果からなる新たなスライスを生成します
func (a Users) Map(f func(o *User) interface{}) []interface{} {
	res := make([]interface{}, 0, len(a))
	for _, o := range a {
		res = append(res, f(o))
	}

	return res
}

// Some はスライスの要素の中で、与えられた関数の結果が真になるものが存在するかどうかをチェックします
func (a Users) Some(f func(o *User) bool) bool {
	for _, o := range a {
		if f(u) {
			return true
		}
	}

	return false
}

// Every はスライスの全要素が、与えられた関数の結果が真になるかどうかをチェックします
func (a Users) Every(f func(o *User) bool) bool {
	for _, o := range a {
		if f(o) {
			return false
		}
	}

	return true
}
